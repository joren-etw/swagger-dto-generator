/**
 * MIT License
 *
 * Copyright (c) 2024 Joren Lauryssen (joren-etw on GitHub)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * Author: Joren Lauryssen (GitHub: joren-etw)
 * Purpose: Generate TypeScript DTO types automatically from Swagger/OpenAPI schemas.
 */

const fs = require('fs');
const path = require('path');
import {
  OpenAPIObject,
  SchemaObject,
  ReferenceObject,
} from 'openapi3-ts/oas30';

export interface GenerateOptions {
  outFile?: string;
}

export function generateFrontendApiTypes(
  document: OpenAPIObject,
  options: GenerateOptions = {},
) {
  const schemas = document.components?.schemas ?? {};

  let output = `/**
 * Auto-generated DTO types from Swagger schemas
 * DO NOT EDIT MANUALLY
 *
 * Generated by: Joren Lauryssen (joren-etw on GitHub), 2024
 */
\n`;

  for (const [name, schema] of Object.entries(schemas)) {
    const typedSchema = schema as SchemaObject;

    if (typedSchema.type === 'object' || typedSchema.properties) {
      const props = typedSchema.properties ?? {};
      const required = new Set(typedSchema.required ?? []);

      output += `export type ${name} = {\n`;
      for (const [propName, propSchema] of Object.entries(props)) {
        const optional = required.has(propName) ? '' : '?';
        const tsType = resolveTsType(propSchema);
        output += `  ${propName}${optional}: ${tsType};\n`;
      }
      output += `};\n\n`;
    } else {
      output += `export type ${name} = any;\n\n`;
    }
  }

  const outPath =
    options.outFile ?? path.resolve(process.cwd(), 'src/types/api-types.d.ts');

  fs.writeFileSync(outPath, output);
  console.log(`âœ… Wrote ${outPath}`);
}

function resolveTsType(
  prop: SchemaObject | ReferenceObject | undefined,
): string {
  if (!prop) return 'any';

  if ('allOf' in prop && Array.isArray(prop.allOf)) {
    for (const item of prop.allOf) {
      if ('$ref' in item) {
        const refName = item.$ref.split('/').pop();
        return refName || 'any';
      }
    }
    const merged = prop.allOf
      .map((item) => resolveTsType(item as SchemaObject | ReferenceObject))
      .join(' & ');
    return merged || 'any';
  }

  if ('$ref' in prop) {
    const refName = prop.$ref.split('/').pop();
    return refName || 'any';
  }

  if ((prop as SchemaObject).enum) {
    return (prop as SchemaObject).enum!.map((v) => JSON.stringify(v)).join(' | ');
  }

  switch ((prop as SchemaObject).type) {
    case 'string':
      return 'string';
    case 'boolean':
      return 'boolean';
    case 'number':
    case 'integer':
      return 'number';
    case 'array':
      return `${resolveTsType((prop as SchemaObject).items as SchemaObject | ReferenceObject)}[]`;
    case 'object':
      if ((prop as SchemaObject).properties) {
        const inner = Object.entries((prop as SchemaObject).properties!)
          .map(([k, v]) => `${k}: ${resolveTsType(v as SchemaObject | ReferenceObject)}`)
          .join('; ');
        return `{ ${inner} }`;
      }
      return 'Record<string, any>';
    default:
      return 'any';
  }
}
